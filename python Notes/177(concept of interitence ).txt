				===========================================================
					Inheriting the Features of Base Class into Derived Class
				===========================================================
=>To Inherit the Features of Base Class into Derived Class, we use the following Syntax:
					class <clsname-1>:
						----------------------
						----------------------
					class <clsname-2>:
						-------------------
						-------------------
					class <clsname-3>:
						-------------------
						-------------------
					-------------------------------
					class <clsname-n>:
						-------------------
						-------------------
					class <clsname-n+1>(clsname-1,clsname-2,....,clsname-n):
						-------------------
						-------------------
****************************
Explanation
****************************
=>Here clsname-1,clsname-2,....,clsname-n are called Base Classes.
=>Here clsname-n+1 Represents Name of the Derived Class.
=>Here All features of Base Classes clsname-1,clsname-2,....,clsname-n are Inherited into Derived Class clsname-n+1 and 
    they are Virtually and we can acesses them w.r.t object OR Class name.
=>When we develop any Inheritance Application, It is always Recommended to create an object of Bottom Most Derived 
    Class bcoz It Inherits the Features of Intermediate Base Class(es) and Top Most Base Class.
=>For Each and Every Class, There exist an Implicit  Pre-Defined Super Class called 'object' and It provided Garbage Collection Facility.
=>Hence for all Data Types, whose super type is 'object'.
*****************************************************************************************
#InhProg1.py
class C1:
    def disp1(self):
        print("C1--disp1()")
class C2(C1):
    def disp2(self):
        print("C2--disp2()")

#Main Program
o2=C2()
o2.disp1()
o2.disp2()

#InhProg3.py
class C1:
    def disp1(self):
        print("C1--disp1()")
class C2(C1):
    def disp2(self):
        print("C2--disp2()")
class C3(C1):
    def disp3(self):
        print("C3--disp3()")
#Main Program
print("w.r.t C2 Class")
o2=C2()
o2.disp1()
o2.disp2()
print("w.r.t C3 Class")
o3=C3()
o3.disp1()
o3.disp3()

#InhProg4.py
class C1:
    def disp1(self):
        print("C1--disp1()")
class C2:
    def disp2(self):
        print("C2--disp2()")
class C3(C1,C2):
    def disp3(self):
        print("C3--disp3()")
#Main Program
o3=C3()
o3.disp1()
o3.disp2()
o3.disp3()

#InhProg5.py
class C1:
    def disp1(self):
        print("C1--disp1()")
class C2(C1):
    def disp2(self):
        print("C2--disp2()")
class C3(C1):
    def disp3(self):
        print("C3--disp3()")
class C4(C2,C3):
    def disp4(self):
        print("C4--disp4()")

#Main Program
o4=C4()
o4.disp1()
o4.disp2()
o4.disp3()
o4.disp4()

#InhProg6.py
class C1:
    def disp1(self):
        print("C1--disp1()")
class C2(C1):
    def disp2(self):
        print("C2--disp2()")
class C3(C1):
    def disp3(self):
        print("C3--disp3()")
class C4(C2,C3):
    def disp4(self):
        self.disp1()
        self.disp2()
        self.disp3()# Derived Class Method Calling Base Class Method
        print("C4--disp4()")

#Main Program
o4=C4()
o4.disp4()

#InhProg7.py
class Parent:
    def getParentProp(self):
        self.pp=float(input("Enter Parent Property:"))
class Child(Parent):
    def getChildProperty(self):
        self.cp=float(input("Enter Child Property:"))
    def getTotalProp(self):
        self.tp=self.pp+self.cp
        print("Parent Property={}".format(self.pp))
        print("Child Property={}".format(self.cp))
        print("Total Property={}".format(self.tp))
#main Program
co=Child()
co.getParentProp()
co.getChildProperty()
co.getTotalProp()


#InhProg8.py
class GrandParent:
    def getGrandParentProp(self):
        self.gpp=float(input("Enter Grand Parent Property:"))
class Parent(GrandParent):
    def getParentProp(self):
        self.pp=float(input("Enter Parent Property:"))
class Child(Parent):
    def getChildProperty(self):
        self.cp=float(input("Enter Child Property:"))
    def getTotalProp(self):
        self.tp=self.gpp+self.pp+self.cp
        print("Parent Grand Property={}".format(self.gpp))
        print("Parent Property={}".format(self.pp))
        print("Child Property={}".format(self.cp))
        print("Total Property={}".format(self.tp))
#main Program
co=Child()
co.getGrandParentProp()
co.getParentProp()
co.getChildProperty()
co.getTotalProp()

#InhProg9.py
class GrandParent:
    def getGrandParentProp(self):
        gpp=float(input("Enter Grand Parent Property:"))
        return gpp
class Parent(GrandParent):
    def getParentProp(self):
        pp=float(input("Enter Parent Property:"))
        return pp
class Child(Parent):
    def getChildProperty(self):
        cp=float(input("Enter Child Property:"))
        return cp
    def getTotalProp(self):
        gpp=self.getGrandParentProp()
        pp=self.getParentProp()
        cp=self.getChildProperty()
        tp=gpp+pp+cp
        print("Parent Grand Property={}".format(gpp))
        print("Parent Property={}".format(pp))
        print("Child Property={}".format(cp))
        print("Total Property={}".format(tp))
#main Program
co=Child()
co.getTotalProp()

#InhProg8.py
class GrandParent:
    def getGrandParentProp(self):
        self.gpp=float(input("Enter Grand Parent Property:"))
class Parent:
    def getParentProp(self):
        self.pp=float(input("Enter Parent Property:"))
class Child(GrandParent,Parent):
    def getChildProperty(self):
        self.cp=float(input("Enter Child Property:"))
    def getTotalProp(self):
        self.getGrandParentProp()
        self.getParentProp()
        self.getChildProperty()
        self.tp=self.gpp+self.pp+self.cp
        print("Parent Grand Property={}".format(self.gpp))
        print("Parent Property={}".format(self.pp))
        print("Child Property={}".format(self.cp))
        print("Total Property={}".format(self.tp))
#main Program
co=Child()
co.getTotalProp()

#InhProg11.py
class Univ:
    def getUnivDet(self):
        self.uname=input("Enter University Name:")
        self.uloc=input("Enter University Location:")
    def dispUnivDet(self):
        print("-" * 50)
        print("University Name:{}".format(self.uname))
        print("University Location:{}".format(self.uloc))
        print("-" * 50)
class College(Univ):
    def getCollegeDet(self):
        self.cname=input("Enter College Name:")
        self.cloc = input("Enter College Location:")
    def dispCollegeDet(self):
        print("-"*50)
        print("College Name:{}".format(self.cname))
        print("College Location:{}".format(self.cloc))
        print("-" * 50)
class Student(College):
    def getStudDet(self):
        self.sno=int(input("Enter Student Number:"))
        self.name=input("Enter Student Name:")
        self.crs=input("Enter Student Course:")
    def dispStudDet(self):
        print("-" * 50)
        print("Student Number:{}".format(self.sno))
        print("Student Name:{}".format(self.name))
        print("Student Course:{}".format(self.crs))
        print("-" * 50)

#main Program
so=Student()
so.getStudDet()
so.getCollegeDet()
so.getUnivDet()
so.dispUnivDet()
so.dispCollegeDet()
so.dispStudDet()

#InhProg11.py
class Univ:
    def getUnivDet(self):
        self.uname=input("Enter University Name:")
        self.uloc=input("Enter University Location:")
    def dispUnivDet(self):
        print("-" * 50)
        print("University Name:{}".format(self.uname))
        print("University Location:{}".format(self.uloc))
        print("-" * 50)
class College(Univ):
    def getCollegeDet(self):
        self.cname=input("Enter College Name:")
        self.cloc = input("Enter College Location:")
    def dispCollegeDet(self):
        print("-"*50)
        print("College Name:{}".format(self.cname))
        print("College Location:{}".format(self.cloc))
        print("-" * 50)
class Student(College):
    def getStudDet(self):
        self.sno=int(input("Enter Student Number:"))
        self.name=input("Enter Student Name:")
        self.crs=input("Enter Student Course:")
    def dispStudDet(self):
        print("-" * 50)
        print("Student Number:{}".format(self.sno))
        print("Student Name:{}".format(self.name))
        print("Student Course:{}".format(self.crs))
        print("-" * 50)

#main Program
so=Student()
so.getStudDet()
so.getCollegeDet()
so.getUnivDet()
so.dispUnivDet()
so.dispCollegeDet()
so.dispStudDet()

#Univ.py<---File Name and Module Name
class Univ:
    def getUnivDet(self):
        self.uname=input("Enter University Name:")
        self.uloc=input("Enter University Location:")
    def dispUnivDet(self):
        print("-" * 50)
        print("University Name:{}".format(self.uname))
        print("University Location:{}".format(self.uloc))
        print("-" * 50)

#Student.py<----File Name and Module Name
import College
class Student(College.College):
    def getStudDet(self):
        self.sno=int(input("Enter Student Number:"))
        self.name=input("Enter Student Name:")
        self.crs=input("Enter Student Course:")
    def dispStudDet(self):
        print("-" * 50)
        print("Student Number:{}".format(self.sno))
        print("Student Name:{}".format(self.name))
        print("Student Course:{}".format(self.crs))
        print("-" * 50)
#UnivCollegeStudent.py
from Student import Student as s
so=s()
so.getStudDet()
so.getCollegeDet()
so.getUnivDet()
so.dispUnivDet()
so.dispCollegeDet()
so.dispStudDet()


