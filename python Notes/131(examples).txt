#DivExcept.py<-----File Name and Module Name
class ZeroError(Exception):pass

#Phase-1: Development Exception Class


#Division.py<-----File Name and Module Name
from DivExcept import ZeroError
def divop(a,b):
    if(b==0):
        raise ZeroError # raise used to Hit the exception as part of Function Body
    else:
        return(a/b)

#Phase-2: Hitting the Exceptions


#DivisionDemo.py<---File Name & Main Program
from Division import divop
from DivExcept import ZeroError
try:
    a=float(input("Enter Value a:"))
    b=float(input("Enter Value b:"))
    res=divop(a,b) # Function Call--gives either Result or exception.
except ZeroError:
    print("\tDon't Enter Zero for Den...")
except ValueError:
    print("\tDon't Enter alnums,strs and symbols ")
else:
    print("Div=", res)

#Phase-3: Handling the Exceptions.


#DivisionDemo2.py<---File Name & Main Program
from Division import divop
from DivExcept import ZeroError
try:
    a=float(input("Enter Value a:"))
    b=float(input("Enter Value b:"))
    res=divop(a,b) # Function Call--gives either Result or exception.
except (ZeroError,ValueError):
    print("\tDon't Enter Zero for Den...")
    print("\tDon't Enter alnums,strs and symbols ")
else:
    print("Div=", res)


#Phase-3: Handling the Exceptions.   


#NameValidationExcept.py
class SpaceError(Exception):pass
class ZeroLengthError(BaseException):pass
class InvalidNameError(Exception):pass


#NameValidationProcess.py<--File Name and Mdule Name
from NameValidationExcept import SpaceError, ZeroLengthError, InvalidNameError
def validate(name):
    if(name.isspace()):
        raise SpaceError
    else:
        words=name.split()
        if(len(words)==0):
            raise ZeroLengthError
        else:
            res=True
            for word in words:
                if(not word.isalpha()):
                    res=False
                    break
            if(res):
                return name
            else:
                raise InvalidNameError

#NameValidationDemo.py
from NameValidationProcess import validate
from NameValidationExcept import SpaceError, ZeroLengthError, InvalidNameError
try:
    name=input("Enter Ur Name:")
    vaidname=validate(name) # Function Call
except SpaceError:
    print("\tDon't Enter Space space for Ur Name:")
except ZeroLengthError:
    print("\tU Must Enter UR name")
except InvalidNameError:
    print("\tUr Name is Invalid")
else:
    print("'{}' is Valid Name".format(name))


#MulExcept.py<--File Name and Module Name
class ZeroError(Exception):pass
class NegativeNumberError(BaseException):pass


#MulTable.py<--File Name and Module Name
from MulExcept import ZeroError,NegativeNumberError
def table(n):
    if(n==0):
        raise ZeroError
    elif(n<0):
        raise NegativeNumberError
    else:
        print("-"*50)
        print("\tMul Table for:{}".format(n))
        print("-" * 50)
        for i in range(1,11):
            print("\t{} x {} ={}".format(n,i,n*i))
        print("-" * 50)


#MulTableDemo.py
from MulTable import table
from MulExcept import ZeroError,NegativeNumberError
try:
    n=int(input("Enter a Number for Generating Mul Table:"))
    table(n) # Function Call--either Gives result or exception
except ZeroError:
    print("\tDon't Enter Zero for Mul Table")
except NegativeNumberError:
    print("\tDon't -Ve Number for Mul table")
except ValueError:
    print("\tDon't enter alnums, strs and symbols")


