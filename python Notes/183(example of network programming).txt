#B. Write a Client Side Program in such way that It should accept a Message from Key Board , Send to Server Side  Program and Obtain Its Reply 
#ChatClient.py
import socket
while(True):
	s=socket.socket()
	s.connect(("127.0.0.1",8888))
	cdata=input("Student-->")
	if(cdata.lower()=="bye"):
			s.send(cdata.encode())
			break
	else:
		s.send(cdata.encode())
		sdata=s.recv(1024).decode()
		print("KVR-->{}".format(sdata))

#A: Write a Server Side Program in such way that It Should accept a Message from Client Side Program and give  Reply to the Client Side Program
#ChatServer.py
import socket
s=socket.socket()
s.bind(("127.0.0.1",8888))
s.listen(3)
while(True):
	csock,caddr=s.accept()
	cdata=csock.recv(1024).decode()
	print("Student-->{}".format(cdata))
	sdata=input("KVR-->")
	csock.send(sdata.encode())

#B.Write a Client Side Program in such way that It should accept an employee Number from Key Board , Send to Server Side Program and Obtain Other Deatils of Employee
#DataBaseClient.py
import socket
s=socket.socket()
s.connect(("localhost",3600))
print("CSP Connected with SSP")
empno=input("Enter Employee Number for Getting Other Deatils:")
s.send(empno.encode())
record=s.recv(1024).decode()
print("Result from Server")
print(record)

#A. Write a Server Side Program in such way that  It Should accept an Employee Number from Client Side Program  and gives Other Details of employee by extracting from Employee Table
#DataBaseServer1.py
import socket
import oracledb as orc
s=socket.socket()
s.bind(("localhost",3600))
s.listen(2)
print("SSP is ready to accept any CSP request")
while(True):
	try:
		cs,ca=s.accept()
		cdata=cs.recv(1024).decode()
		print("Employee Number at Server={}".format(cdata))
		empno=int(cdata)
		#We must write PDBC Code 
		con=orc.connect("system/tiger@localhost/orcl")
		cur=con.cursor()
		cur.execute("select * from employee where eno=%d" %empno)
		record=cur.fetchone()
		if(record!=None):
			cs.send(str(record).encode())
		else:
			cs.send(("Employee Number {} Does not  Exist".format(empno)).encode() )
	except ValueError:
		cs.send("Don't enter alnums,strs and symbols for emp number".encode())
	except orc.DatabaseError as db:
		cs.send(("Problem in Oracle DataBase:"+db).encode())

#A. Write a Server Side Program in such way that  It Should accept an Employee Number from Client Side Program  and gives Other Details of employee by extracting from Employee Table
#DataBaseServer2.py
import socket
import oracledb as orc
s=socket.socket()
s.bind(("localhost",3600))
s.listen(2)
print("SSP is ready to accept any CSP request")
while(True):
	try:
		cs,ca=s.accept()
		cdata=cs.recv(1024).decode()
		print("Employee Number at Server={}".format(cdata))
		empno=int(cdata)
		#We must write PDBC Code 
		con=orc.connect("system/tiger@localhost/orcl")
		cur=con.cursor()
		cur.execute("select * from employee where eno=%d" %empno)
		record=cur.fetchone()
		if(record!=None):
			s1="---------------------------------------------------"
			s2="Employee Number:{}".format(record[0])
			s3="Employee Name:{}".format(record[1])
			s4="Employee Salary:{}".format(record[2])
			s5="Employee Comp Name:{}".format(record[3])
			s6="---------------------------------------------------"
			res=s1+"\n"+s2+"\n"+s3+"\n"+s4+"\n"+s5+"\n"+s6
			cs.send(res.encode())
		else:
			cs.send(("Employee Number {} Does not  Exist".format(empno)).encode() )
	except ValueError:
		cs.send("Don't enter alnums,strs and symbols for emp number".encode())
	except orc.DatabaseError as db:
		cs.send(("Problem in Oracle DataBase:"+db).encode())

#B. Write a Client Side Program in such way that It should accept a Number from Key Board , Send to Server Side Program and Obtain Its Square
#SquareClient.py
import socket # Step-1
s=socket.socket() # Step-2
s.connect(("localhost",9999)) # Step-3
print("CSP Connected with SSP")
#read the Data from Key Board
val=input("Enter a Number for Getting Its Square:")
s.send(val.encode()) # Step-4
res=s.recv(1024).decode() # # Step-5
print("Square({})={}".format(val,res))

#A.  Write a Server Side Program in such way that It Should accept a Number a From Client Side Program, Square It  and Gives the Result to Client Side Program 
#SquareServer.py
import socket # Step-1
s=socket.socket() # Step-2
s.bind(("localhost",9999)) # Step-3
s.listen(2)#Step-4
print("SSP is Ready to accept any CSP Request")
while(True):
	try:
		cs,ca=s.accept() # Step-5
		#Step-6
		cdata=cs.recv(1024).decode()  # Reading Client Request Data
		print("Val of Client at Server=",cdata)
		res=float(cdata)**2 # Processing the Client Request Data
		cs.send(str(res).encode())  # Gives Response back to client side program
	except ValueError:
		cs.send("Don't enter alnums,strs and symbols for Num-Value".encode())

