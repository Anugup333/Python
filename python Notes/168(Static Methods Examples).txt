#Program for Demonstrating the Need of Static Method
#StaticMethodEx1.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class HYD:
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#we want to display all the above 3 Objects Data by using single method--Static Method
HYD.dispobjectdata(so,"Student") # Calling Static Method w.r.t Class Name
HYD.dispobjectdata(eo,"Employee") # Calling Static Method w.r.t Class Name
HYD.dispobjectdata(to,"Teacher") # Calling Static Method w.r.t Class Name


#Program for Demonstrating the Need of Static Method
#StaticMethodEx2.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class HYD:
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#we want to display all the above 3 Objects Data by using single method--Static Method
h=HYD()
h.dispobjectdata(so,"Student") # Calling Static Method w.r.t Object Name
h.dispobjectdata(eo,"Employee") # Calling Static Method w.r.t Object Name
h.dispobjectdata(to,"Teacher") # Calling Static Method w.r.t Object Name

#Program for Demonstrating the Need of Static Method
#StaticMethodEx3.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class HYD:
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#we want to display all the above 3 Objects Data by using single method--Static Method
HYD().dispobjectdata(so,"Student") # Calling Static Method w.r.t Name-Less Object
HYD().dispobjectdata(eo,"Employee") # Calling Static Method w.r.t Name-Less Object
HYD().dispobjectdata(to,"Teacher") # Calling Static Method w.r.t Name-Less Object

#Program for Demonstrating the Need of Static Method
#StaticMethodEx4.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class HYD:
    @classmethod
    def acceptobjectdata(cls,objdata,objinfo):
        cls.dispobjectdata(objdata,objinfo) # Caling Static Method w.r.t cls
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#-----------------------
HYD.acceptobjectdata(so,"Student") # Calling Class Level Method w.r.t Class Name
HYD.acceptobjectdata(eo,"Employee") # Calling Class Level Method w.r.t Class Name
HYD.acceptobjectdata(to,"Teacher") # Calling Class Level Method w.r.t Class Name

#Program for Demonstrating the Need of Static Method
#StaticMethodEx5.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class KVR:
    @classmethod
    def acceptobjectdata(cls, objdata, objinfo):
        HYD.dispobjectdata(objdata, objinfo)  # Caling Static Method w.r.t Class name

class HYD:
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#-----------------------
KVR.acceptobjectdata(so,"Student") # Calling Class Level Method w.r.t Class Name
KVR.acceptobjectdata(eo,"Employee") # Calling Class Level Method w.r.t Class Name
KVR.acceptobjectdata(to,"Teacher") # Calling Class Level Method w.r.t Class Name

#Program for Demonstrating the Need of Static Method
#StaticMethodEx6.py
class Student:
    def getstuddata(self):
        self.sno=int(input("Enter Student Number:"))
        self.sname=input("Enter Student Name:")
        print("---------------------------------")
class Employee:
    def getempdata(self):
        self.eno = int(input("Enter Employee Number:"))
        self.ename = input("Enter Employee Name:")
        self.sal = float(input("Enter Employee Salary:"))
        print("---------------------------------")
class Teacher:
    def getteacherdata(self):
        self.tno = int(input("Enter teacher Number:"))
        self.tname = input("Enter Teacher Name:")
        self.sub = input("Enter Teacher Subject:")
        print("---------------------------------")
class KVR:
    @classmethod
    def acceptobjectdata(cls, objdata, objinfo):
        HYD().acceptobjectdata(objdata, objinfo)  # Caling Instance Method w.r.t Name-less Object

class HYD:
    def acceptobjectdata(self,objdata,objinfo):
        self.dispobjectdata(objdata,objinfo)# calling Static Method name w.r.t self
    @staticmethod
    def  dispobjectdata(objdata,objinfo):
        print("---------------------------------------")
        print("{} Object Information".format(objinfo))
        print("---------------------------------------")
        for dmn,dmv in objdata.__dict__.items():
            print("\t{}---->{}".format(dmn,dmv))
        print("---------------------------------------")

#main Program
so=Student()
eo=Employee()
to=Teacher()
so.getstuddata()
eo.getempdata()
to.getteacherdata()
#-----------------------
KVR.acceptobjectdata(so,"Student") # Calling Class Level Method w.r.t Class Name
KVR.acceptobjectdata(eo,"Employee") # Calling Class Level Method w.r.t Class Name
KVR.acceptobjectdata(to,"Teacher") # Calling Class Level Method w.r.t Class Name


#Program for Performing Any Arithmetic Operation
# based on Arithmetic Op with Two values by using Static Methods
class Arithmetic:
    def getValues(self):
        while(True):
            try:
                self.a=float(input("Enter First Value:"))
                self.b = float(input("Enter Second Value:"))
                self.op=input("Enter Any Arithmetic Operator:")
            except ValueError:
                print("Don't enter alnums,strs and symbols--try again")
            else:
                break
class Calculator:
    @staticmethod
    def operation(ap):
        match(ap.__dict__.get('op')):
            case "+":
                print("Sum({},{})={}".format(ap.__dict__['a'],
                                             ap.__dict__['b'],ap.__dict__['a']+ap.__dict__['b']))
            case "-":
                print("Sub({},{})={}".format(ap.__dict__.get('a'),
                                     ap.__dict__.get('b'), ap.__dict__.get('a') - ap.__dict__.get('b')))
            case "*":
                print("Mul({},{})={}".format(ap.__dict__.get('a'),
                                             ap.__dict__.get('b'), ap.__dict__.get('a') * ap.__dict__.get('b')))
            case "/":
                print("Div({},{})={}".format(ap.__dict__.get('a'),
                                             ap.__dict__.get('b'), ap.__dict__.get('a') / ap.__dict__.get('b')))
            case "//":
                print("FloorDiv({},{})={}".format(ap.__dict__.get('a'),
                                             ap.__dict__.get('b'), ap.__dict__.get('a') // ap.__dict__.get('b')))
            case "%":
                print("ModDiv({},{})={}".format(ap.__dict__.get('a'),
                                             ap.__dict__.get('b'), ap.__dict__.get('a') % ap.__dict__.get('b')))
            case "**":
                print("Pow({},{})={}".format(ap.__dict__.get('a'),
                                             ap.__dict__.get('b'), ap.__dict__.get('a') ** ap.__dict__.get('b')))
            case _:
                print("{} is Invalid Arithmetic Operator".format(ap.__dict__.get('op')))
#main Program
ao=Arithmetic()
ao.getValues()
Calculator.operation(ao)