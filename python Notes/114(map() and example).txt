		====================================
				2) map()
		====================================
=>map() is used for obtaining new Iterable object from existing iterable object by applying old iterable elements to the function.
=>In otherwords, map() is used for obtaining new list of elements  from  existing list of elements by applying old list  elements 
to the function.

=>Syntax:-      varname=map(FunctionName,Iterable_object)
				
=>here 'varname' is an object of type <class,map'> and we can convert into any iteratable object by using type casting functions.
=>"FunctionName" represents either Normal function or anonymous functions.
=>"Iterable_object" represents Sequence, List, set and dict types.
=>The execution process of map() is that " map() sends every element of iterable object to the specified function, process it and returns the 
modified value (result) and new list of elements will be obtained". This process will be continued until all elements of Iterable_object completed.
-----------------------------------------------------------------------------------------------------------------------------------------------------

Example:
#Program for finding Squares for Every Value of List
#MapEx1.py
def squares(val):
    return val**2

#Main Program
print("Enter List of Values  Separated by Space")
lst=[float(val) for val in input().split()]
mo=map(squares,lst)
#Here mo is an object of <class 'map'>
#Convert map object into list type
sqlist=list(mo)
print("----------------------------------")
print("Given Numbers\t\tSquares")
print("----------------------------------")
for gn,sqv in zip(lst,sqlist):
    print("\t{}\t\t\t\t{}".format(gn,sqv))
print("----------------------------------")


#Program for finding Squares for Every Value of List
#MapEx2.py
print("Enter List of Values  Separated by Space")
lst=[float(val) for val in input().split()]
sqlist=list(map(lambda val:val**2,lst))
print("----------------------------------")
print("Given Numbers\t\tSquares")
print("----------------------------------")
for gn,sqv in zip(lst,sqlist):
    print("\t{}\t\t\t\t{}".format(gn,sqv))
print("----------------------------------")


#Program for finding Squares for Every Value of List
#MapEx3.py
print("Enter List of Values  Separated by Space")
lst=[float(val) for val in input().split()]
sqlist=list(map(lambda val:val**2,lst))
sqrtlist=list(map(lambda val:val**0.5,lst))
print("-------------------------------------------------")
print("Given Numbers\t\tSquares\t\tSquareRoot")
print("-------------------------------------------------")
for gn,sqv,sqt in zip(lst,sqlist,sqrtlist):
    print("\t{}\t\t\t\t{}\t\t{}".format(gn,sqv,round(sqt,2)))
print("------------------------------------------------")


#Program for aceepting List of Salaries and give 50% Hike to Every Employee
#MapEx4.py
print("Enter List Salaries:")
oldsal=[float(sal) for sal in input().split() if float(sal)>0]
newsal=list(map(lambda sal:sal+sal*50/100,oldsal))
print('-'*60)
print("\tOLD SALARIES\tNEW SALARIES")
print('-'*60)
for old,new in zip(oldsal,newsal):
    print("\t{}\t\t\t{}".format(old,new))
print('-'*60)


#Program for Two Lists of Elements and Add them with equal Elements
#MapEx5.py
print("Enter First List Elements:")
lst1=[float(val) for val in input().split()]
print("Enter Second List Elements:")
lst2=[float(val) for val in input().split()]
#add lst1 and lst2 and place them in lst3
lst3=list(map(lambda k,v:k+v , lst1,lst2))
print('-'*60)
print("\tLIST1\tLIST2\t\tLIST3")
print('-'*60)
for x,y,z in zip(lst1,lst2,lst3):
    print("\t{}\t{}\t\t\t{}".format(x,y,z))
print('-'*60)


#Program for Two Lists of Elements and Add them with Un-equal Elements
#MapEx6.py
print("Enter First List Elements:")
lst1=[float(val) for val in input().split()]
print("Enter Second List Elements:")
lst2=[float(val) for val in input().split()]
if(len(lst1)>len(lst2)):
    for i in range(len(lst1)-len(lst2)):
        lst2.append(0)
elif(len(lst2)>len(lst1)):
    for i in range(len(lst2)-len(lst1)):
        lst1.append(0)
#Add the List Elements
lst3=tuple(map(lambda k,v:k+v, lst1,lst2))
#Display the Result
print('-'*60)
print("\tLIST1\tLIST2\t\tLIST3")
print('-'*60)
for x,y,z in zip(lst1,lst2,lst3):
    print("\t{}\t{}\t\t\t{}".format(x,y,z))
print('-'*60)


