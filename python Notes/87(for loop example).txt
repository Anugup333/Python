#Program for Finding the sum of N Natural Numbers
#NatNumsSumEx1.py
n=int(input("Enter How Many Natural Numbers Squares and Cubes sum u want:"))
if(n<=0):
    print("{} is Invalid Input".format(n))
else:
    s,ss,cs=0,0,0
    print("-" * 50)
    print("\tNatNums\t\tSquares\t\t\tCubes")
    print("-" * 50)
    for i in range(1,n+1):
        print("\t{}\t\t\t\t{}\t\t\t{}".format(i,i**2,i**3))
        s=s+i
        ss=ss+i**2
        cs=cs+i**3
    else:
        print("-"*50)
        print("\t{}\t\t\t\t{}\t\t\t{}".format(s,ss,cs))
        print("-" * 50)

#Program for Finding the sum of N Natural Numbers
#NatNumsSumEx1.py
n=int(input("Enter How Many Natural Numbers sum u want:"))
if(n<=0):
    print("{} is Invalid Input".format(n))
else:
    print("-" * 50)
    print("Sum of {} Numbers".format(n))
    print("-" * 50)
    s=0 # Additive Identity--Initlization for accumutaing sum of n numbers
    for i in range(1,n+1):
        print("\t{}".format(i))
        s=s+i # OR s+=i
    else:
        print("-"*50)
        print("Sum={}".format(s))
        print("-" * 50)

#Program for Finding the sum of N Natural Numbers
#NatNumsProductEx1.py
n=int(input("Enter How Many Natural Numbers Product u want:"))
if(n<=0):
    print("{} is Invalid Input".format(n))
else:
    print("-"*40)
    print("Product of {} Numbers".format(n))
    print("-" * 40)
    p=1 # # Multicative  Identity
    for i in range(1,n+1):
        print("\t\t{}".format(i))
        p=p*i
    else:
        print("-" * 40)
        print("Product={}".format(p))
        print("-" * 40)


#Program for Display for EMul Table for  N where N is +ve
#ForLoopEx5.py
n=int(input("Enter a Number for Generating Mul table:"))
if(n<=0):
    print("\t{} is Invalid Input".format(n))
else:
    print("-" * 50)
    print("Mul Table for :{}".format(n))
    print("-" * 50)
    for i in range(1,11):
        print("\t{} x {}={}".format(n,i,n*i))
    else:
        print("-"*50)

#Program for Display for Even Numbers within N where N is +ve
#ForLoopEx4.py
n=int(input("Enter How Many Even Numbers u want to Generate:"))
if(n<=0):
    print("\t{} is Invalid Input".format(n))
else:
    print("Even Numbers within:{}".format(n))
    if(n%2!=0):
        n=n-1
    for i in range(n,0,-2):
        print("\t{}".format(i))
    print("-------------------------------------")


#Program for Display for Odd Numbers within N where N is +ve
#ForLoopEx3.py
n=int(input("Enter How Many Odd Numbers u want to Generate:"))
if(n<=0):
    print("\t{} is Invalid Input".format(n))
else:
    print("Odd Numbers within:{}".format(n))
    if(n%2==0):
        n=n-1
    for i in range(n,0,-2):
        print("\t{}".format(i))
    print("----------------------------------")


#ForLoopEx2.py
s="PYTHON"
print("By using For Loop--Forward Direction wihout Indices")
for ch in s:
    print("\t{}".format(ch))
print("------------------------------------------")
print("By using For Loop--Backward Direction wihout Indices")
for ch in s[::-1]:
    print("\t{}".format(ch))
print("------------------------------------------")
print("By using For Loop--Forward Direction with +Ve Indices")
for i in range(0,len(s)):
    print("\t{}".format(s[i]))
print("------------------------------------------")
print("By using For Loop--Forward Direction with -VE Indices")
for i in range(-len(s),0):
    print("\t{}".format(s[i]))
print("------------------------------------------")
print("By using For Loop--Backward Direction with -VE Indices")
for i in range(-1,-(len(s)+1),-1):
    print("\t{}".format(s[i]))
print("------------------------------------------")


#Program for accepting a Word and display Its Chars
#ForLoopEx1.py
s=input("Enter a Word:")
print("By using while Loop")
i=0
while(i<len(s)):
    print("\t{}".format(s[i]))
    i=i+1
print("-----------------------------")
print("By using for Loop")
for ch in s: # s="PYTHON"
    print("\t{}".format(ch))
print("-----------------------------")


#program for Cal Factorial of a Number
#n!= n x n-1 x.......1
#FactorialEx1.py
n=int(input("Enter a Number for Calculating Factorial:"))
if(n<0):
    print("{} is Invalid Input, can't Cal Factorial".format(n))
else:
    fact=1
    for i in range(n,0,-1):
        fact=fact*i
    else:
        print("\t{}!={}".format(n,fact))


#program for Cal Factorial of a Number
#n!= 1x2x3x.....n
#FactorialEx1.py
n=int(input("Enter a Number for Calculating Factorial:"))
if(n<0):
    print("{} is Invalid Input, can't Cal Factorial".format(n))
else:
    fact=1
    for i in range(1,n+1):
        fact=fact*i
    else:
        print("Factorial({})={}".format(n,fact))

