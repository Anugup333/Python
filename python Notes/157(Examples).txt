#Program for Obtaining the connection from Oracle db
#OracleConnTestEx1.py
import oracledb as orc # Step-1
try:
    conobj=orc.connect("system/tiger@localhost/orcl") # Step-2
    print("Type of conobj=",type(conobj))
    print("Python Program Got Connection from Oracle Database")
except orc.DatabaseError as db:
    print("Problem with Oracle DB: ",db)

#Program for Obtaining the connection from Oracle db
#OracleConnTestEx2.py
import oracledb as orc # Step-1
def getconnection():
    try:
        conobj=orc.connect("system/tiger@127.0.0.1/orcl") # Step-2
        print("Type of conobj=",type(conobj))
        print("Python Program Got Connection from Oracle Database")
    except orc.DatabaseError as db:
        print("Problem with Oracle DB: ",db)

#main Program
getconnection() # Function Call


#Program for Creating an object of Cursor
#OracleCursorobjEx.py
import oracledb as kvr # Step-1
def createcurobj():
    try:
        conobj=kvr.connect("system/tiger@localhost/orcl") # Step-2
        print("Type of conobj=",type(conobj))
        print("Python Program got connection from Oracle DB")
        print("---------------------------------------------")
        curobj=conobj.cursor()
        print("type of curobj=",type(curobj))
        print("Python Program Created an object of cursor")
        print("---------------------------------------------")
    except kvr.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
createcurobj() # Function call


import oracledb as orc
print(orc.__version__)


#Program for altering by adding New column Name to the Employee Table
#OracleAlterTablewithAdd.py
import oracledb as orc
def alterwithadd():
    try:
        conobj=orc.connect("system/tiger@localhost/orcl")#Step-2
        curobj=conobj.cursor() # Step-3
        #Step-4
        aq="alter table employee add(compname varchar2(10) not null)"
        curobj.execute(aq)
        print("Table altered Successfully--verify") # Step-5
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#Main Program
alterwithadd()

#Program for altering the column sizes of Employee Table
#OracleAlterTablewithModify.py
import oracledb as orc
def alterwithmodify():
    try:
        conobj=orc.connect("system/tiger@localhost/orcl")#Step-2
        curobj=conobj.cursor() # Step-3
        #Step-4
        aq="alter table employee modify(eno number(3),name varchar2(15))"
        curobj.execute(aq)
        print("Table altered Successfully--verify") # Step-5
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#Main Program
alterwithmodify()

#Program for Inserting Employee Record in employee table by reading Values from KBD
#OracleRecordInsertEx1.py
import oracledb as orc # Step-1
def recordinsert():
    try:
        conobj = orc.connect("system/tiger@localhost/orcl")  # Step-2
        curobj = conobj.cursor()  # Step-3
        # Step-4
        iq="insert into employee values(250,'Mansi',5.3,'TCS')"
        curobj.execute(iq)
        conobj.commit()
        print("{} Record Inserted".format(curobj.rowcount)) # Step-5
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:", db)

#Main Program
recordinsert()


#Program for Inserting Employee Record in employee table by reading Values from KBD
#OracleRecordInsertEx2.py
import oracledb as orc # Step-1
def recordinsert():
    try:
        conobj = orc.connect("system/tiger@localhost/orcl")  # Step-2
        curobj = conobj.cursor()  # Step-3
        # Step-4
        #Accept the employee Data from Key Board
        print("--------------------------------------")
        empno=int(input("Enter Employee Number:"))
        empname=input("Enter Employee Name:")
        empsal=float(input("Enter Employee Salary:"))
        empcompname=input("Enter Employee Comp Name:")
        print("--------------------------------------")
        iq="insert into employee values(%d,'%s',%f,'%s')"
        curobj.execute(iq %(empno,empname,empsal,empcompname))
        conobj.commit()
        print("{} Record Inserted".format(curobj.rowcount)) # Step-5
        print("--------------------------------------")
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:", db)

#Main Program
recordinsert()


#Program for Inserting Employee Record in employee table by reading Values from KBD
#OracleRecordInsertEx3.py
import oracledb as orc # Step-1
def recordinsert():
    while(True):
        try:
            conobj = orc.connect("system/tiger@localhost/orcl")  # Step-2
            curobj = conobj.cursor()  # Step-3
            # Step-4
            #Accept the employee Data from Key Board
            print("--------------------------------------")
            empno=int(input("Enter Employee Number:"))
            empname=input("Enter Employee Name:")
            empsal=float(input("Enter Employee Salary:"))
            empcompname=input("Enter Employee Comp Name:")
            print("--------------------------------------")
            iq="insert into employee values(%d,'%s',%f,'%s')"
            curobj.execute(iq %(empno,empname,empsal,empcompname))
            conobj.commit()
            print("{} Record Inserted".format(curobj.rowcount)) # Step-5
            print("--------------------------------------")
            ch=input("Do u want to Insert Another Employee Record(yes/no):")
            if(ch.lower()=="no"):
                print("Thx for using this program")
                break
        except orc.DatabaseError as db:
            print("Problem in Oracle DB:", db)
        except ValueError:
            print("Don't enter alnums,strs and salary for empno,salary-try again ")

#Main Program
recordinsert()


#Program for Creating a Table employee in Oracle
#OracleTableCreateEx.py
import oracledb as orc # Step-1
def tablecreate():
    try:
        conobj=orc.connect("system/tiger@localhost/orcl")#Step-2
        curobj=conobj.cursor() # Step-3
        #Step-4
        tc="create table teacher(tno number(2) primary key,tname varchar2(10) not null,sal number(5,2) not null)"
        curobj.execute(tc)
        print("Table Created Successfully--verify") # Step-5
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#Main Program
tablecreate() # Function Call

#Program for obtaining the Col Names from Table
#OracleColumnNamesEx.py
import oracledb as orc
def selectcols():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from employee"
        cur.execute(sq)
        #Get the Col Names from cursor object
        print("*"*50)
        for colinfo in cur.description:
            print("\t{}".format(colinfo[0]),end="\t")
        print()
        print("*"*50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
selectcols()


#program for Deleting the Record Based on Employee Number
#OracleRecordDeleteEx1.py
import oracledb as orc
def recorddelete():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        dq="delete from employee where eno=115"
        cur.execute(dq) # OR cur.execute("delete from employee where eno=115")
        con.commit()
        if(cur.rowcount>0):
            print("\t{} Record Deleted".format(cur.rowcount))
        else:
            print("\tRecord does not exist")
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
recorddelete()


  while(True):
        try:
            con=orc.connect("system/tiger@localhost/orcl")
            cur=con.cursor()
            #get employee Number from KBD
            empno=int(input("Enter Employee Number for Deleting the Record:"))
            dq="delete from employee where eno=%d" %empno
            cur.execute(dq)
            #OR
            #cur.execute("delete from employee where eno=%d" %empno)
            con.commit()
            if(cur.rowcount>0):
                print("\t{} Record Deleted".format(cur.rowcount))
            else:
                print("\tRecord does not exist")
            ch=input("Do u want delete Another Record(yes/no):")
            if(ch.lower()=="no"):
                print("Thx for Using This Program")
                break
        except orc.DatabaseError as db:
            print("Problem in Oracle DB:",db)
        except ValueError:
            print("Don't Enter alnums,strs and symbols for emp number-try again")

#main program
recorddelete()


#Program for Reading the Records from Employee Table
# by using fetchone()
#OracleRecordsSelectEx1.py
import oracledb as orc
def recordsselect():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from employee"
        cur.execute(sq)
        #Here cur object contains all reords from employee Table
        print("*"*50)
        while(True):
            record = cur.fetchone()
            if(record!=None):
                for val in record:
                    print("\t{}".format(val),end="\t")
                print()
            else:
                break
        print("*" * 50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
recordsselect()


#Program for Reading the Records from Employee Table
# by using fetchmany(no. of records)
#OracleRecordsSelectEx2.py
import oracledb as orc
def recordsselect():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from employee"
        cur.execute(sq)
        #Here cur object contains all reords from employee Table
        print("*"*50)
        records=cur.fetchmany(5)
        for record in records:
            for val in record:
                print("\t{}".format(val),end="\t")
            print()
        print("*" * 50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
recordsselect()


#Program for Reading the Records from Employee Table
# by using fetchall()
#OracleRecordsSelectEx3.py
import oracledb as orc
def recordsselect():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from employee"
        cur.execute(sq)
        #Here cur object contains all reords from employee Table
        print("*"*50)
        records=cur.fetchall()
        for record in records:
            for val in record:
                print("\t{}".format(val),end="\t")
            print()
        print("*" * 50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
recordsselect()

#Program for obtaining the Records with Col Names from Table
#OracleRecordsWithColumnNamesEx.py
import oracledb as orc
def selectrecordswithcols():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from employee"
        cur.execute(sq)
        #Get the Col Names from cursor object
        print("*"*50)
        for colinfo in cur.description:
            print("\t{}".format(colinfo[0]),end="\t")
        print()
        print("*"*50)
        #get the Records from cursor object
        records=cur.fetchall()
        if(len(records)==0):
            print("\tTable Does Not Contains Records")
        else:
            for record in records:
                for val in record:
                    print("\t{}".format(val),end="\t")
                print()
        print("*" * 50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
selectrecordswithcols()

#Program for obtaining the Records with Col Names from Table
#OracleRecordsWithColumnNamesEx2.py
import oracledb as orc
def selectrecordswithcols():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        #Read OR Select the Records from employee Table
        sq="select * from %s" %(input("Enter Table Name to view Records:"))
        cur.execute(sq)
        #Get the Col Names from cursor object
        print("*"*50)
        for colinfo in cur.description:
            print("\t{}".format(colinfo[0]),end="\t")
        print()
        print("*"*50)
        #get the Records from cursor object
        records=cur.fetchall()
        if(len(records)==0):
            print("\tTable Does Not Contains Records")
        else:
            for record in records:
                for val in record:
                    print("\t{}".format(val),end="\t")
                print()
        print("*" * 50)
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
selectrecordswithcols()


#program for DUpdate the Record Based on Employee Number
#OracleRecordUpdateEx1.py
import oracledb as orc
def recordupdate():
    try:
        con=orc.connect("system/tiger@localhost/orcl")
        cur=con.cursor()
        uq="update employee set sal=12.35,compname='IBM' where eno=115"
        cur.execute(uq)
        con.commit()
        if(cur.rowcount>0):
            print("\t{} Record Updated-verify".format(cur.rowcount))
        else:
            print("\tRecord Does not Exist")
    except orc.DatabaseError as db:
        print("Problem in Oracle DB:",db)

#main program
recordupdate()

#program for DUpdate the Record Based on Employee Number
#OracleRecordUpdateEx2.py
import oracledb as orc
def recordupdate():
    while(True):
        try:
            con=orc.connect("system/tiger@localhost/orcl")
            cur=con.cursor()
            #Accept the empoloyee Number,new sal and New comp name
            empno=int(input("Enter Employee Number for Updating Other Deatils:"))
            newsal=float(input("Enter Employee New Salary:"))
            newcompname = input("Enter Employee New Comp Name:")
            uq="update employee set sal=%f,compname='%s' where eno=%d"
            cur.execute(uq %(newsal,newcompname,empno))
            con.commit()
            if(cur.rowcount>0):
                print("\t{} Record Updated-verify".format(cur.rowcount))
            else:
                print("\tRecord Does not Exist")
            ch = input("Do u want Update Another Record(yes/no):")
            if (ch.lower() == "no"):
                print("Thx for Using This Program")
                break
        except orc.DatabaseError as db:
            print("Problem in Oracle DB:",db)
        except ValueError:
            print("\tDon't Enter alnums,strs and symbols for emp number and Salaryt-try again")

#main program
recordupdate()



