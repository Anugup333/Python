#Program for Demonstrating   Keyword Variable Length Arguments
#NOTE: This Program will not Execute as It is bcoz PVM Remembers Latest Function Def (in the case same fucntion 
#KeywordVarLengthArgsEx1.py
def disp(sno,sname,marks):#Function Def-1
	print(sno,sname,marks)

def disp(tno,tname,sub1,sub2): #Function Def-2
	print(tno,tname,sub1,sub2)

def disp(cid,cname,hb1,hb2,hb3): #Function Def-3
	print(cid,cname,hb1,hb2,hb3)

#Main Program---Family of Similar Functions with
disp(sno=10,sname="RS",marks=45.67) # Function call-1 with 3 Keyword variable  length Args
disp(tno=100,tname="TR",sub1="Python",sub2="Java") # Function call-2 with 4 Keyword variable  length Args
disp(cid=200,cname="DR",hb1="Eating",hb2="Sleeping",hb3="Chating") # Function call-3 with 5 Keyword variable  length Args


#Program for Demonstrating   Keyword Variable Length Arguments
#NOTE: This Program will Execute as It is 
#KeywordVarLengthArgsEx2.py
def disp(sno,sname,marks):#Function Def-1
	print(sno,sname,marks)
disp(sno=10,sname="RS",marks=45.67) # Function call-1 with 3 Keyword variable  length Args
#-----------------------------------------------------------------------------------------------------
def disp(tno,tname,sub1,sub2): #Function Def-2
	print(tno,tname,sub1,sub2)

disp(tno=100,tname="TR",sub1="Python",sub2="Java") # Function call-2 with 4 Keyword variable  length Args
#-----------------------------------------------------------------------------------------------------
def disp(cid,cname,hb1,hb2,hb3): #Function Def-3
	print(cid,cname,hb1,hb2,hb3)

disp(cid=200,cname="DR",hb1="Eating",hb2="Sleeping",hb3="Chating") # Function call-3 with 5 Keyword variable  length Args
#-----------------------------------------------------------------------------------------------------


#Program for Demonstrating   Keyword Variable Length Arguments
#NOTE: This Program will Execute as It is 
#PureKeywordVarLengthArgsEx1.py

def  disp(**kvr): # Here **kvr is called Kwd Var length param and whose is type dict
	print(kvr,type(kvr))


#Main Program---Family of Similar Functions with Keyword variable  length Args
disp(sno=10,sname="RS",marks=45.67) # Function call-1 with 3 Keyword variable  length Args
disp(tno=100,tname="TR",sub1="Python",sub2="Java") # Function call-2 with 4 Keyword variable  length Args
disp(cid=200,cname="DR",hb1="Eating",hb2="Sleeping",hb3="Chating") # Function call-3 with 5 Keyword variable  length Args


#Program for Demonstrating   Keyword Variable Length Arguments
#NOTE: This Program will Execute as It is 
#PureKeywordVarLengthArgsEx2.py

def  disp(**kvr): # Here **kvr is called Kwd Var length param and whose is type dict
	print("-"*50)
	for k in kvr.keys():
		print("\t{}--->{}".format(k,kvr[k]))
	print()
	print("-"*50)

#Main Program---Family of Similar Functions with Keyword variable  length Args
disp(sno=10,sname="RS",marks=45.67) # Function call-1 with 3 Keyword variable  length Args
disp(tno=100,tname="TR",sub1="Python",sub2="Java") # Function call-2 with 4 Keyword variable  length Args
disp(cid=200,cname="DR",hb1="Eating",hb2="Sleeping",hb3="Chating") # Function call-3 with 5 Keyword variable  length Args



#PureKeywordVarLengthArgsEx3.py
def findtotalmarks(sno,sname,cls,**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(sno))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("-"*50)
	totmarks=0
	print("\tSubjects\tMarks")
	print("-"*50)
	for subject,marks in submarks.items():
		print("\t{}\t\t{}".format(subject,marks))
		totmarks=totmarks+marks
	print("\t\tTOTAL MARKS:{}".format(totmarks))
	print("-"*50)



#Main Program
findtotalmarks(10,"RS","X",Telugu=60,Hindi=80,English=89,Maths=90,Scienec=78,Social=89)
findtotalmarks(20,"TR","XII",Sankrit=99,Eng=89,Maths=75,Physics=60,Chemistry=59)
findtotalmarks(30,"JH","B.Tech",OS=78,DBMS=56,NW=54)
findtotalmarks(40,"SS","Rsearch")


#PureKeywordVarLengthArgsEx4.py
def findtotalmarks(sno,sname,cls,city="HYD",**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(sno))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("\tStudent City:{}".format(city))
	print("-"*50)
	totmarks=0
	print("\tSubjects\tMarks")
	print("-"*50)
	for subject,marks in submarks.items():
		print("\t{}\t\t{}".format(subject,marks))
		totmarks=totmarks+marks
	print("\t\tTOTAL MARKS:{}".format(totmarks))
	print("-"*50)



#Main Program
findtotalmarks(10,"RS","X",Telugu=60,Hindi=80,English=89,Maths=90,Scienec=78,Social=89)
findtotalmarks(20,"TR","XII",Sankrit=99,Eng=89,Maths=75,Physics=60,Chemistry=59)
findtotalmarks(30,"JH","B.Tech",OS=78,DBMS=56,NW=54)
findtotalmarks(40,"SS","Rsearch")
findtotalmarks(50,"DT","Politics",Eco=56,His=45,Civ=67,city="USA")
findtotalmarks(40,"SR","Research","AUS")



#PureKeywordVarLengthArgsEx5.py
def findtotalmarks(sno,sname,cls,*intmarks,city="HYD",**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(sno))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("\tStudent City:{}".format(city))
	im=0
	print("\tInternal Marks")
	for m in intmarks:
		print("\t{}".format(m))
		im=im+m
	print("-"*50)
	em=0
	print("\tSubjects\tMarks")
	print("-"*50)
	for subject,marks in submarks.items():
		print("\t{}\t\t{}".format(subject,marks))
		em=em+marks
	print("Internal Marks:{} \t External Marks:{}".format(im,em))
	print("\t\tTOTAL MARKS:{}".format(im+em))
	print("-"*50)



#Main Program
findtotalmarks(10,"RS","X",10,15,17,18,12,18,Telugu=60,Hindi=80,English=89,Maths=90,Scienec=78,Social=89)
findtotalmarks(20,"TR","XII",18,12,11,12,18,Sankrit=99,Eng=89,Maths=75,Physics=60,Chemistry=59)
findtotalmarks(30,"JH","B.Tech",2.3,4.5,5.6,OS=78,DBMS=56,NW=54)
findtotalmarks(40,"SS","Rsearch",1,2,3)
findtotalmarks(50,"DT","Politics",Eco=56,His=45,Civ=67,city="USA")
findtotalmarks(40,"SR","Research",city="AUS")


