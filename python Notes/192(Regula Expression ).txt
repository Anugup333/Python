		================================================================
			Introduction to Regular Expressions in Python
		================================================================
=>The Regular Expressions Concept is One of Programming Language Independent Concept.
=>The Purpose of Regular Expressions is that "To Build Robust Applications with Data Validation Rules".
=>Since Regular Expressions are used To Build Robust Applications with Data Validation Rules, Regular Expressions Concept  Implemented by All Programming Language Developers.
=>The Regular Expressions Concept  Implemented in Python in the for for a Pre-Defined Module Called 're'.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Applications of  Regular Expressions
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The  Regular Expressions are Used Development of Language Compilers and Intereprets.
=>The  Regular Expressions are Used Development of Operating System.
=>The  Regular Expressions are Used Development of  Universal Protocols.
=>The  Regular Expressions are Used Development of  Electronic Devices.
=>The  Regular Expressions are Used Development of Pattern Matching.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Definition of  Regular Expressions
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Regular Expression is one the Search Pattern, which is a Combination of Alphabets, Digits and Special Symbols and It used for Matching OR Finding OR Searching in given Data and Obtains Desired Result.
--------------------------------------------------------------------------------------------------------------------------------------------------------------

gd="bUVp5#HLs6KNwc@8aDMxR7Z&"

Find all Upper Case Alphabets
Find all Lower Case Alphabets
Find all  Digits
Find all Special Symbols

		========================================================= 
			Module Name Required for Developing Regular Expressions
						OR
				Pre-defined Functions in re module
		=========================================================
=>The Module Name Required for Developing Regular Expressions is "re".
=>In Otherwords "re" is the pre-defined modules used for Building Robust Application by performining Data 
    Validations.
=>The 're' module contains the follwing essential Functions.
-------------------------------------------------------------------------------------------
1) finditer():
-------------------------------------------------------------------------------------------		
Syntax:-       varname=re.finditer("search-pattern","Given data")
=>here varname is an object of type <class,'Callable_Itetaror'>
 =>This function is used for searching the "search pattern" in given data iteratively and it returns  table of entries which contains start index , end index and matched value based on the search pattern.
 ----------------------------------------------------------------------------------------------------------------------------
2) findall():
----------------------------------------------------------------------------------------------
Syntax:-      varname=re.findall("search-pattern","Given data")
	=>here varname is an object of <class,'list'>

=>This function is used for searching the search pattern in  entire given data and find all  occurences / matches  and it returns all the matched values in the form an object <class,'list'> but not returning Start and End Index Values.
----------------------------------------------------------------------------------------------
3) search():
----------------------------------------------------------------------------------------------
Syntax:-      varname=re.search("search-pattern","Given data")
=>here varname is an object of <class,'re.match'> or <class,'NoneType'>

=>This function is used for searching the search pattern in  given data for first occuence / match only but  not for other occurences / matches.
=>if the search pattern found in  given data then it returns an object of match class  which contains matched value and start and end index values and it indicates  search is successful.
=>if the search pattern not found in  given data then it returns None which is type <class, "NoneType"> and it indicates search is un-successful
-----------------------------------------------------------------------------------------------
4) group():
----------------------------------------------------------------------------------------------
=>This function is used obtaining matched value by the findIter() and search()
=>This function present in match class of re module
Syntax:-     varname=matchobj.group()
----------------------------------------------------------------------------------------------
5) start():
----------------------------------------------------------------------------------------------
=>This function is used obtaining  starting index of matched value
=>This function present in match class of re module
Syntax:     varname=matchobj.start()
----------------------------------------------------------------------------------------------
6) end():
----------------------------------------------------------------------------------------------
=>This function is used obtaining  end index+1 of matched value
=>This function present in match class of re module
Syntax:     varname=matchobj.end()

-------------------------------------------------------------------------------------------------------------------------------
7) sub() Function
=> This function replaces the matches with the text of your choice:

import re
txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)---------------------------------- The9rain9in9Spain

			===================================================================
					Programmer-Defined Character Classes
			===================================================================
=>The Programmer-Defined Character Classes are Developed by Python programmer and They are Used for Defining Search Patterns and these Search Patterns Used for  Matching OR Finding OR Searching in given Data and Obtains Desired Result.
=>Syntax:        "[Programmer-Defined Character Class]"
=>In Python Programming, we have 16 Programmer-Defined Character Classes. They are given in the following table.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SLNO	Programmer-Defined	Description
				
                           Character Classes		
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1.    [abc]	Searches for Either 'a' or 'b' or 'c' Only
2.    [^abc]	Searches for all except 'a' or 'b' or 'c' Only
3.    [A-Z]	Searches for all Upper Case Letters Only
4.    [^A-Z]	Searches for all except Upper Case Letters
5.    [a-z]     searches for all lower case letters only
6.    [^a-z]    searches for all except lower case letters 
7.    [A-Za-z]  Searches for all Upper Case and Lower case alphabets only
8.    [^A-Za-z] Searches for all except  Upper Case and Lower case alphabets only
9.    [0-9]     searches for all digits only 
10.   [^0-9]    searches for all except digits
11.   [A-Za-z0-9] searches for all alpha-numeric
12.   [^A-Za-z0-9] searches for all except alpha-numeric(all special symbols)
13.   
14.
15.
16.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

			===================================================================
						Pre-Defined Character Classes
			===================================================================
=>The Pre-Defined Character Classes are already defined by Python Language Developers and they are available in Python Software and those Pre-Defined Character Classes used by Python Programmers for defining Search Patterns Used for  Matching OR Finding OR Searching in given Data and Obtains Desired Result.
=>Syntax:  "\Pre-Defined Character Class"
=>In Python Programming, we have 6 Pre-Defined Character Classes. They are given in the following table.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SLNO		Pre-Defined Character Classes		Description
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1.   \d	         Searches for Digits OR [0-9]		
2.   \D	       Searches for all except Digits OR [^0-9]		
3.   \w		Searches for Word Character OR [A-Za-z0-9]
4.   \W		Searches for Special Symbols OR [^A-Za-z0-9]
5.   \s		Searches for Space Character
6.   \S   	Searches for all except Space Character
----------------------------------------------------------------------------------------------------------------------------------------------------------------

			=======================================================
					Quantifiers in Regular Expressions
			=======================================================
=>Quantifiers in Regular Expressions are used for searching number of occurences of the specified value (alphabets or digits or special symbols) used in search pattern  to search in the given data and obtains desired result.
=>The Quantifiers in Regular Expressions are
----------------------------------------------------------------------------------------------
1)"K"------>Searches for Exactly One K.
2) K+------>Searches for One K or More K's
3) "K*"---->Searches for Zero K or One K or More K's
4) "K?"--->Searches for Zero K or One K
5) "."------>Searching all occurences of Letter of given Data.
============================================================
Special Formula :  Quantifiers combined with Programmer and Pre-Defined Character Classes
-------------------------------------------------------------------------------------------------------------------------------------
1) \d+---Searching One OR More Digits  OR  [0-9]+
2) \d{10}  OR [0-9]{10}------->Searches 10 Digit Number Exactly
3) \d{m}  OR [0-9]{m}-------->searches for M-Digit Number
4) \d{m,n}----->Searches for Minimum M-Digit Number and Maximum n-Digit Number Only.
-------------------------------------------------------------------------------------------------------------------------------------
1) \w+------------------------------->Searching One OR More Word Character OR  [A-Za-z0-9]+
2) \w{5}  OR [A-Za-z0-9]{5}------->Searches 5 Letter Word Exactly
3) \w{m}  OR [A-Za-z0-9]{m}-------->searches M-Letter Word 
4) \w{m,n}OR [A-Za-z0-9]{m,n}----->Searches for Minimum M-Letter Word  and Maximum n-Letter Word  Only.
5)[A-Za-z]{3}-------------Searches for 3 Letter Word contains Purely Alphabets
5)[A-Za-z]{m,n}---------Searches for Minimum M-Letter Word and Maximum n-Letter Word contains Purely Alphabets
6) \dd.\dd-------->Searches for Floating Point Value contains An Integer Part with 2 Digits and  Decimal Part with 2 Digits.
==========================================x====================================================