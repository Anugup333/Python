#Program for Demonstrating Data Encapsulation
#Account1.py<----File Name and Module Name
class Account:
    def __init__(self):
        self.__acno=123
        self.cname="Rossum"
        self.__bal=4.5
        self.__pin=4578
        self.bname="SBI"
#Program for Demonstrating Data Abstraction
#OtherProgrammer1.py
from Account1 import Account
ac=Account() # Object Creation
#print("Account Number:",ac.acno)
print("Account Holder Name:",ac.cname)
#print("Account Balance:",ac.bal)
#print("Account PIN:",ac.pin)
print("Account Branch:",ac.bname)

#Program for Demonstrating Data Encapsulation
#Account2.py<----File Name and Module Name
class Account:
    def getaccdet(self):
        self.__acno=123
        self.cname="Rossum"
        self.__bal=4.5
        self.__pin=4578
        self.bname="SBI"
#Program for Demonstrating Data Abstraction
#OtherProgrammer2.py
from Account2 import Account
ac=Account() # Object Creation
ac.getaccdet()
#print("Account Number:",ac.acno)
print("Account Holder Name:",ac.cname)
#print("Account Balance:",ac.bal)
#print("Account PIN:",ac.pin)
print("Account Branch:",ac.bname)

#Program for Demonstrating Data Encapsulation
#Account3.py<----File Name and Module Name
class Account:
    def __getaccdet(self):
        self.acno=123
        self.cname="Rossum"
        self.bal=4.5
        self.pin=4578
        self.bname="SBI"
#Program for Demonstrating Data Abstraction
#OtherProgrammer3.py
from Account3 import Account
ac=Account() # Object Creation
#ac.getaccdet()------can't access the Method bcoz It is Encapsulated.
#print("Account Number:",ac.acno)
#print("Account Holder Name:",ac.cname)
#print("Account Balance:",ac.bal)
#print("Account PIN:",ac.pin)
#print("Account Branch:",ac.bname)

#Program for Demonstrating Data Encapsulation
#Account4.py<----File Name and Module Name
class Account:
    def ______init__(self): # Constructor can't be hidden
        self.acno=123
        self.cname="Rossum"
        self.bal=4.5
        self.pin=4578
        self.bname="SBI"
#Program for Demonstrating Data Abstraction
#OtherProgrammer4.py
from Account4 import Account
ac=Account() # Object Creation
ac.______init__()
print("Account Number:",ac.acno)
print("Account Holder Name:",ac.cname)
print("Account Balance:",ac.bal)
print("Account PIN:",ac.pin)
print("Account Branch:",ac.bname)

#Program for Demonstrating Data Encapsulation
#Account5.py<----File Name and Module Name
class __Account:
    def __init__(self): # Constructor can't be hidden
        self.acno=123
        self.cname="Rossum"
        self.bal=4.5
        self.pin=4578
        self.bname="SBI"
#Program for Demonstrating Data Abstraction
#OtherProgrammer4.py--This Program will not execute
# bcoz Account class made as encapsulated
from Account5 import Account # we get ImportError
"""ac=Account() # Object Creation
print("Account Number:",ac.acno)
print("Account Holder Name:",ac.cname)
print("Account Balance:",ac.bal)
print("Account PIN:",ac.pin)
print("Account Branch:",ac.bname)"""

#AccountDetailsSameClassEx1.py
class Account:
    def __init__(self): # Constructor can't be hidden
        self.__acno=123
        self.cname="Rossum"
        self.__bal=4.5
        self.__pin=4578
        self.bname="SBI"
    def dispaccdet(self):
        print("Account Number:",self.__acno)
        print("Account Holder Name:",self.cname)
        print("Account Balance:",self.__bal)
        print("Account PIN:",self.__pin)
        print("Account Branch:",self.bname)
#Main Program
ac=Account()
ac.dispaccdet()
#OthersFunctional.py
from AccountFunctional import *
#print("Account Number:",acno)
print("Account Holder Name:",cname)
#print("Account Balance:",bal)
#print("Account PIN:",pin)
print("Account Branch:",bname)

#AccountDetailsSameClassEx2.py
class Account:
    def __init__(self): # Constructor can't be hidden
        self.__acno=123
        self.cname="Rossum"
        self.__bal=4.5
        self.__pin=4578
        self.bname="SBI"
    def __dispaccdet(self):
        print("Account Number:",self.__acno)
        print("Account Holder Name:",self.cname)
        print("Account Balance:",self.__bal)
        print("Account PIN:",self.__pin)
        print("Account Branch:",self.bname)
    def getaccdet(self):
        self.__dispaccdet()

#Main Program
ac=Account()
ac.getaccdet()


