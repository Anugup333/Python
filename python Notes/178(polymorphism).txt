			==================================================
					Polymorphism in Python
			==================================================
=>The Polymorphism is one of the Best Principle in OOP Lang
=>The Advantage of Polymorphism is that "To Take Less Memory Space"
=>The Process of Representing "One Form in Multiple Forms" is called Polymorphism
=>One Form Represents Original Method
=>Multiple Forms Represents Overridden Methods
=>A Form is Nothing But State of Existence of Method. If the Method Exist in Base Class then It is called Original Method and If the method exist in Derived Class then It is called Overridden Methods.
=>To Implement Polymorphism in Python Lang, we Have Two Programming Concepts. They are
					1. Method Overriding
					2. Constructor Overriding
------------------------------------------------------------------------------------------------------------------------------------------------		===========================================
			Method Overriding in Python
		===========================================
=>Method Overriding=Method Heading is same + Method Body is Different
			(OR)
=>The process of re-defining the original method of base class into various derived classes for performing different operations is called Method Overriding.
=>To use Method Overriding in python program we must apply Inheritance Principle.
=>Method Overriding used for implementing Polymorphism Principle.
    ( PLOYMORPHISM<----METHOD OVERRIDING<-----INHERITANCE<----CLASS AND OBJECTS )
-------------------------------------------------------------------------------------------------------------------------------------------------------
#Program for Demonstrating the Polymorphism
#PolyEx1.py
class RS:
    def advises(self):#Original Method
        print("RS Said to all Student--wake-up at 4:30am and Read Notes")
class Stud1(RS):
    def advises(self):#Overridden Method
        print("Stud1 Said to RS--wake-up at 5:00am and Read Notes")
        super().advises() # will call base class Original Method from Derived Class Overridden Method

#Main Program
print('w.r.t Stud1')
s1=Stud1()
s1.advises()

#Program for Demonstrating the Polymorphism
#PolyEx2.py
class RS:
    def advises(self):#Original Method
        print("RS Said to all Student--wake-up at 4:30am and Read Notes")

class Stud1(RS):
    def advises(self):#Overridden Method
        print("Stud1 Said to RS--wake-up at 5:00am and Read Notes")
        super().advises() # will call base class Original Method from Derived Class Overridden Method
class Stud2(Stud1):
    def advises(self):#Overridden Method
        print("Stud2 Said to RS--wake-up at 8:00am and Read Notes")
        super().advises()# will call base class Original Method from Derived Class Overridden Method


#Main Program
print('w.r.t Stud2')
s2=Stud2()
s2.advises()

#Program for Demonstrating the Polymorphism
#PolyEx3.py
class RS:
    def advises(self):#Original Method
        print("RS Said to all Student--wake-up at 4:30am and Read Notes")

class Stud1(RS):
    def advises(self):#Overridden Method
        print("Stud1 Said to RS--wake-up at 5:00am and Read Notes")

class Stud2(Stud1):
    def advises(self):#Overridden Method
        print("Stud2 Said to RS--wake-up at 8:00am and Read Notes")
        RS.advises(self)# will call base class Original Method from Derived Class Overridden Method
        Stud1.advises(self)

#Main Program
print('w.r.t Stud2')
s2=Stud2()
s2.advises()

#PolyEx4.py
class Circle:
    def draw(self): # Original Method
        print("Drawing Circle")
        #super().draw()---Invalid bcoz 'object' class does not contain draw()
class Square(Circle):
    def draw(self): # Overridden method
        print("Drawing Square")
        super().draw()
class Rect(Square):
    def draw(self): # Overridden method
        print("Drawing Rect")
        super().draw()

#main program
r=Rect()
r.draw()

#PolyEx5.py
class Circle:
    def draw(self): # Original Method
        print("Drawing Circle")
        #super().draw()---Invalid bcoz 'object' class does not contain draw()
class Square:
    def draw(self): # Original Method
        print("Drawing Square")
class Rect(Square,Circle):
    def draw(self): # Overridden method
        print("Drawing Rect")
        super().draw()
        Circle.draw(self)


#main program
r=Rect()
r.draw()

#PolyEx6.py
class Circle:
    def draw(self): # Original Method
        print("Drawing Circle")
        #super().draw()---Invalid bcoz 'object' class does not contain draw()
class Square:
    def draw(self): # Original Method
        print("Drawing Square")
class Rect(Square,Circle):
    def draw(self): # Overridden method
        print("Drawing Rect")
        Circle.draw(self)
        Square.draw(self)

#main program
r=Rect()
r.draw()


#PolyEx7.py
class Circle:
    def draw(self): # Original Method
        print("Drawing Circle")
        #super().draw()---Invalid bcoz 'object' class does not contain draw()
    def hello(self):
        print("Hello Circle")
class Square:
    def draw(self): # Original Method
        print("Drawing Square")
    def hello(self):
        print("Hello Square")
class Rect(Square,Circle):
    def draw(self): # Overridden method
        print("Drawing Rect")
        Circle.draw(self)
        Square.draw(self)
    def hello(self):
        print("Hello Rect")
        Circle.hello(self)
        Square.hello(self)

#main program
r=Rect()
r.draw()
print("--------------------------")
r.hello()

#PolyEx8.py
class Univ:
    def getDet(self):
        self.uname=input("Enter University Name:")
        self.uloc=input("Enter University Location:")
    def dispDet(self):
        print("-" * 50)
        print("University Name:{}".format(self.uname))
        print("University Location:{}".format(self.uloc))
        print("-" * 50)
class College(Univ):
    def getDet(self):
        self.cname=input("Enter College Name:")
        self.cloc = input("Enter College Location:")
    def dispDet(self):
        print("-"*50)
        print("College Name:{}".format(self.cname))
        print("College Location:{}".format(self.cloc))
        print("-" * 50)
class Student(College):
    def getDet(self):
        self.sno=int(input("Enter Student Number:"))
        self.name=input("Enter Student Name:")
        self.crs=input("Enter Student Course:")
        print("----------------------------------")
        College.getDet(self)
        print("----------------------------------")
        Univ.getDet(self)
    def dispDet(self):
        Univ.dispDet(self)
        College.dispDet(self)
        print("-" * 50)
        print("Student Number:{}".format(self.sno))
        print("Student Name:{}".format(self.name))
        print("Student Course:{}".format(self.crs))
        print("-" * 50)

#main Program
so=Student()
so.getDet()
so.dispDet()

#PolyEx9.py
class Univ:
    def getDet(self):
        self.uname=input("Enter University Name:")
        self.uloc=input("Enter University Location:")
    def dispDet(self):
        print("-" * 50)
        print("University Name:{}".format(self.uname))
        print("University Location:{}".format(self.uloc))
        print("-" * 50)
class College(Univ):
    def getDet(self):
        self.cname=input("Enter College Name:")
        self.cloc = input("Enter College Location:")
        print("----------------------------------")
        super().getDet()
    def dispDet(self):
        super().dispDet()
        print("-"*50)
        print("College Name:{}".format(self.cname))
        print("College Location:{}".format(self.cloc))
        print("-" * 50)
class Student(College):
    def getDet(self):
        self.sno=int(input("Enter Student Number:"))
        self.name=input("Enter Student Name:")
        self.crs=input("Enter Student Course:")
        print("----------------------------------")
        super().getDet()
        self.dispDet()
    def dispDet(self):
        super().dispDet()
        print("-" * 50)
        print("Student Number:{}".format(self.sno))
        print("Student Name:{}".format(self.name))
        print("Student Course:{}".format(self.crs))
        print("-" * 50)

#main Program
so=Student()
so.getDet()

