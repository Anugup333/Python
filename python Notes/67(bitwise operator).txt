				=================================================
						5. Bitwise Operators-------------Most IMP
				=================================================
=>The purpose of Bitwise Operators is that "To Perform Operation on Binary Data in the form Bit by Bit".
=>The Bitwise Operators are applicable on Integer Data But not Applicable on Floating Point Values bcoz Integer Data 
     always Provides Certainity where as Floating point Values unable to Provide Certainity.
=>The Execution Process of Bitwise Operators is show bellow.
			a) Bitwise Operator First Converts Integer Data into Binary Data.
			b) Bitwise Operator Performs Bitwise Operations on Binary Data and Result Stored in Main Memory in 
			    the form Binary Data.
			c) When we Display the Bitwise Operation Result then That Shown to the Programmer / User in the form 
			    of Decimal Number System.
=>Since Bitwise Operators performs Operations on Binary Data in the form of Bit by Bit and hence They named as 
    Bitwise Operators.
=>In Python Programming, we have 6 Types of Bitwise Operators. They are
------------------------------------------------------------------------------------------------------------------------------------------------------------
SLNO			SYMBOL			MEANING
------------------------------------------------------------------------------------------------------------------------------------------------------------
1.				    <<			Bitwise Left Shift Operator
2.				    >>			Bitwise Right Shift Operator
3.				     &				Bitwise AND Operator
4.				      |				Bitwise OR Operator
5.				     ~(tilde)		Bitwise Complement Operator
6.				     ^				Bitwise XOR Operator	
---------------------------------------------------------------------------------------------------------------------------
			=======================================================
				1. Bitwise Left Shift Operator ( << )
			=======================================================
Syntax:	varname = Given Number << No. of Bits
--------------------
Explanation:
--------------------
=>The Execution Process of Bitwise LeftShift Operator ( << ) is that "It Moves Number of Bits Towards Left Side By Adding Number of Zeros (Number of Zeros=Depending No. Of bits we Flipped-off) at Right Side.
-------------------------------
Examples
-------------------------------
>>> a=10
>>> b=a<<3
>>> print(b)------------80
>>> print(4<<3)-------32
>>> print(9<<2)-------36
>>> print(10<<0)------10
>>> print(10.3<<2)-----------TypeError: unsupported operand type(s) for <<: 'float' and 'int'
>>> print(4<<-1)-------------ValueError: negative shift count
========================================x======================================================

			==================================================
				2. Bitwise RightShift Operator ( >> )
			==================================================
Syntax:     varname=Given Data >> No. of Bits
--------------------
Explanation:
--------------------
=>The Execution Process of Bitwise Right Shift Operator ( >> ) is that "It Moves Number of Bits Towards Right Side By Adding Number of Zeros (Number of Zeros=Depending No. Of bits we Flipped-off) at Left  Side.
-------------------------------
Examples
-------------------------------
>>> a=10
>>> b=a>>3
>>> print(b)---------1
>>> print(16>>2)---4
>>> print(32>>3)---4
>>> print(32>>2)---8
>>> print(32>>0)---32
>>> print(80.5<<4)----------TypeError: unsupported operand type(s) for <<: 'float' and 'int'
>>> print(42>>-4)------------ValueError: negative shift count
=============================================================================