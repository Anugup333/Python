#Program for Demonstarting the Need of Instance Method
# and How self contains Current Object Address.
#InstanceMethodEx1.py
class Student:
    def readstudvals(self):
        print("I am from readstudvals()")
        print("Current Object Address/Ref=",id(self))
        print("------------------------------------")

#Main Program
so1=Student() # Object Creation
print("ID of so1 in Main Program=",id(so1))
so1.readstudvals()
#-------------------------------------------
so2=Student() # Object Creation
print("ID of so2 in Main Program=",id(so2))
so2.readstudvals()


#Program for Reading Student Values and Display Values
# by Using Classes and Objects
#InstanceMethodEx2.py
class Student:
    def readstudvals(self,objinfo):
        print("-" * 50)
        print("Enter {} Student Information".format(objinfo))
        print("-"*50)
        self.sno=int(input("\tEnter Student Number:"))
        self.name=input("\tEnter Student Name:")
        self.marks=float(input("\tEnter Student Marks:"))
        print("-" * 50)
    def dispstudvals(self,objinfo):
        print("-" * 50)
        print("{} Student Information".format(objinfo))
        print("-" * 50)
        print("\tStudent Number:{}".format(self.sno))
        print("\tStudent Name:{}".format(self.name))
        print("\tStudent Marks:{}".format(self.marks))
        print("-" * 50)
#Main Program
#Create Two Objects of Student Class
s1=Student()
s2=Student()
#read the Values for object s1 by using Instance Method
s1.readstudvals("First") # Calling Instance Methods by using Object Name
#read the Values for object s2 by using Instance Method
s2.readstudvals("Second") # Calling Instance Methods by using Object Name
#Display the Data of Object s1 by using Instance Method
s1.dispstudvals("First")
#Display the Data of Object s2 by using Instance Method
s2.dispstudvals("Second")


#Program for Reading Student Values and Display Values
# by Using Classes and Objects
#InstanceMethodEx3.py
class Student:
    def readstudvals(self,objinfo):
        print("-" * 50)
        print("Enter {} Student Information".format(objinfo))
        print("-"*50)
        self.sno=int(input("\tEnter Student Number:"))
        self.name=input("\tEnter Student Name:")
        self.marks=float(input("\tEnter Student Marks:"))
        print("-" * 50)
    def dispstudvals(self,objinfo):
        print("-" * 50)
        print("{} Student Information".format(objinfo))
        print("-" * 50)
        print("\tStudent Number:{}".format(self.sno))
        print("\tStudent Name:{}".format(self.name))
        print("\tStudent Marks:{}".format(self.marks))
        print("-" * 50)
#Main Program
#Create Two Objects of Student Class
s1=Student()
s2=Student()
#read  and display the Values for object s1 by using Instance Method
s1.readstudvals("First") # Calling Instance Methods by using Object Name
s1.dispstudvals("First")
#read and display the Values for object s2 by using Instance Method
s2.readstudvals("Second") # Calling Instance Methods by using Object Name
s2.dispstudvals("Second")

#Program for Reading Student Values and Display Values
# by Using Classes and Objects
#InstanceMethodEx4.py
class Student:
    def readstudvals(self,objinfo):
        print("-" * 50)
        print("Enter {} Student Information".format(objinfo))
        print("-"*50)
        self.sno=int(input("\tEnter Student Number:"))
        self.name=input("\tEnter Student Name:")
        self.marks=float(input("\tEnter Student Marks:"))
        print("-" * 50)
        self.dispstudvals(objinfo) # One Instance Method calling another method of same class by using self
    def dispstudvals(self,objinfo):
        print("-" * 50)
        print("{} Student Information".format(objinfo))
        print("-" * 50)
        print("\tStudent Number:{}".format(self.sno))
        print("\tStudent Name:{}".format(self.name))
        print("\tStudent Marks:{}".format(self.marks))
        print("-" * 50)
#Main Program
#Create Two Objects of Student Class
s1=Student()
s2=Student()
#read  and display the Values for object s1 by using Instance Method
s1.readstudvals("First") # Calling Instance Methods by using Object Name
#read and display the Values for object s2 by using Instance Method
s2.readstudvals("Second") # Calling Instance Methods by using Object Name


#Program for Reading Two values from KBD and Find their sum
# by Using Classes and Objects with Instance Methods
#InstanceMethodEx5.py
class Sum:
    def readvals(self):
        self.a=float(input("Enter First Value:"))
        self.b = float(input("Enter Second Value:"))
    def addvals(self):
        self.c=self.a+self.b
    def dispvals(self):
        print("Val of a={}".format(self.a))
        print("Val of b={}".format(self.b))
        print("Sum={}".format(self.c))
#Main Program
s=Sum() # Object Creation
s.readvals()
s.addvals()
s.dispvals()


#Program for Reading Two values from KBD and Find their sum
# by Using Classes and Objects with Instance Methods
#InstanceMethodEx6.py
class Sum:
    def readvals(self):
        self.a=float(input("Enter First Value:"))
        self.b = float(input("Enter Second Value:"))
    def addvals(self):
        self.c=self.a+self.b
    def dispvals(self):
        self.readvals()
        self.addvals() # One Instance Method calling another method of same class by using self
        print("Val of a={}".format(self.a))
        print("Val of b={}".format(self.b))
        print("Sum={}".format(self.c))
#Main Program
s=Sum() # Object Creation
s.dispvals()

#program for Generating Mul Table by using Classes and Object with Instance Methods
#InstanceMethodEx7.py
class MulTable:
    def getN(self):
        self.n=int(input("Enter a Number for Generating Mul table:"))
    def table(self):
        if(self.n<=0):
            print("{} is Invalid Input".format(self.n))
        else:
            print("------------------------------------")
            print("Mu table for :{}".format(self.n))
            print("------------------------------------")
            for i in range(1,11):
                print("\t{}x{}={}".format(self.n,i,self.n*i))
            print("------------------------------------")

#Main Program
mt=MulTable() # Object Creation
mt.getN()
mt.table()

#program for Generating Mul Table by using Classes and Object with Instance Methods
#InstanceMethodEx8.py
class MulTable:
    def getN(self):
        while(True):
            try:
                self.n=int(input("Enter a Number for Generating Mul table:"))
            except ValueError:
                print("\tDon't Enter alnums,strs and symbols")
            else:
                self.table()
                break
    def table(self):
        if(self.n<=0):
            print("{} is Invalid Input".format(self.n))
        else:
            print("------------------------------------")
            print("Mu table for :{}".format(self.n))
            print("------------------------------------")
            for i in range(1,11):
                print("\t{}x{}={}".format(self.n,i,self.n*i))
            print("------------------------------------")

#Main Program
mt=MulTable() # Object Creation
mt.getN()


#Program for accepting student details and save them as record in Student table of Oracle
#InstanceMethodEx9.py
import oracledb as orc
class Student:
    def getStudVals(self):
        self.sno=int(input("\tEnter Student Number:"))
        self.name=input("\tEnter Student Name:")
        self.marks=float(input("\tEnter Student Marks:"))
    def savestuddata(self):
        self.getStudVals()
        #u must Database Connection Code with Oracle
        try:
            con=orc.connect("system/tiger@localhost/orcl")
            cur=con.cursor()
            iq="insert into student values(%d,'%s',%f)"
            cur.execute(iq %(self.sno,self.name,self.marks))
            con.commit()
            print("{} Record Inserted".format(cur.rowcount))
        except orc.DatabaseError as db:
            print("Problem in Oracle in DB:",db)

#Main Program
s=Student()
s.savestuddata()

#Program for accepting student details and save them as record in Student table of Oracle
#InstanceMethodEx10.py
import oracledb as orc
class Student:
    def getStudVals(self):
        self.sno=int(input("\tEnter Student Number:"))
        self.name=input("\tEnter Student Name:")
        self.marks=float(input("\tEnter Student Marks:"))
    def savestuddata(self):
        self.getStudVals()
        #u must Database Connection Code with Oracle
        try:
            con=orc.connect("system/tiger@localhost/orcl")
            cur=con.cursor()
            iq="insert into student values(%d,'%s',%f)"
            cur.execute(iq %(self.sno,self.name,self.marks))
            con.commit()
            print("{} Record Inserted".format(cur.rowcount))
        except orc.DatabaseError as db:
            print("Problem in Oracle in DB:",db)

#Main Program
s=Student()
while(True):
    s.savestuddata()
    ch=input("Do u want to Insert Another Record(yes/no):")
    if(ch.lower()=="no"):
        print("Thx for using program")
        break
#Program for accepting student details and save them as record in Student table of Oracle
#InstanceMethodEx10.py
import oracledb as orc
class Student:
    def readstuddatafromDB(self):
        #u must Database Connection Code with Oracle
        try:
            con=orc.connect("system/tiger@localhost/orcl")
            cur=con.cursor()
            sq="select * from student"
            cur.execute(sq)
            #Get the Col Name
            print("-"*50)
            for colinfo in cur.description:
                print("\t{}".format(colinfo[0]),end="\t")
            print()
            print("-" * 50)
            #Get the records
            records=cur.fetchall()
            for record in records:
                for val in record:
                    print("\t{}".format(val),end="\t")
                print()
            print("-" * 50)

        except orc.DatabaseError as db:
            print("Problem in Oracle in DB:",db)

#Main Program
s=Student()
s.readstuddatafromDB()

