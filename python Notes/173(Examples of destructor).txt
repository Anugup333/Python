#DestEx1.py
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor--ID=",id(self))
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space--ID=",id(self))

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
print("Program Execution Ended")
print("----------------------------------------------------------")
#GC calls Destructor by default at the end of the Program automatically / Implictly--Known as Automatic Garbage Collection.

#DestEx2.py
import sys
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor--ID=",id(self))
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space--ID=",id(self))
		global totmemspace
		totmemspace=totmemspace-sys.getsizeof(self)
		print("Now  Available Memory Space=",totmemspace)

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
totmemspace=sys.getsizeof(e1)+sys.getsizeof(e2)+sys.getsizeof(e3)
print("Initially Total Memory Space=",totmemspace)
print("Program Execution Ended")
print("----------------------------------------------------------")
#GC calls Destructor by default at the end of the Program automatically / Implictly--Known as Automatic Garbage Collection.


#DestEx3.py
import time
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor")
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space")

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e1")
time.sleep(4)
del e1 # GC calls Its Destructor Forcefully
time.sleep(4)
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e2")
time.sleep(4)
del e2 # GC calls Its Destructor Forcefully
time.sleep(4)
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e3")
del e3 # GC calls Its Destructor Forcefully
time.sleep(4)
print("Program Execution Ended")
print("----------------------------------------------------------")
time.sleep(4)

#DestEx4.py
import time
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor")
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space")

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e1")
time.sleep(4)
e1=None # GC calls Its Destructor Forcefully
time.sleep(4)
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e2")
time.sleep(4)
e2=None # GC calls Its Destructor Forcefully
time.sleep(4)
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
print("No longer Interested to maintain object memory space e3")
e3=None # GC calls Its Destructor Forcefully
time.sleep(4)
print("Program Execution Ended")
print("----------------------------------------------------------")
time.sleep(4)

#DestEx5.py
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor")
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space")

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=e1 # Deep Copy
e3=e1 # Deep  Copy
print(e1.__dict__,id(e1))
print(e2.__dict__,id(e2))
print(e3.__dict__,id(e3))
print("Program Execution Ended")
print("----------------------------------------------------------")


#DestEx5.py
import time
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor")
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space")

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=e1 # Deep Copy
e3=e1 # Deep  Copy
print(e1.__dict__,id(e1))
print("No longer Interested to maintain object memory space e1")
time.sleep(4)
del e1 #  GC Will not calls Its Destructor bcoz e2 and e3 points to memory space
print(e2.__dict__,id(e2))
print("No longer Interested to maintain object memory space e2")
time.sleep(4)
del e2 #  GC Will not calls Its Destructor bcoz  e3 points to memory space
print(e3.__dict__,id(e3))
print("No longer Interested to maintain object memory space e3")
time.sleep(4)
del e3 #  GC Will calls Its Destructor bcoz No Objects points to memory space
time.sleep(4)
print("Program Execution Ended")
print("----------------------------------------------------------")


#GCEX1.py
import gc
print("----------------------------------------------------------")
print("Program Execution Started")
print("Initially, Is  GC Running?=",gc.isenabled()) # True
print("----------------------------------------------------------")
a=10
b=20
gc.disable()
print("Val of a=",a)
print("Val of b=",b)
print("Now Is  GC Running?=",gc.isenabled()) # False
gc.enable()
c=a+b
print("Program Execution Ended")
print("Now Is  GC Running?=",gc.isenabled()) # True
print("----------------------------------------------------------")

#GCEX2.py
import sys,gc
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor--ID=",id(self))
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")
	def  __del__(self):
		print("GC calls __del__() for De-allocating Memory Space--ID=",id(self))
		global totmemspace
		totmemspace=totmemspace-sys.getsizeof(self)
		print("Now  Available Memory Space=",totmemspace)

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("Initially, Is  GC Running?=",gc.isenabled()) # True
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
gc.disable()
totmemspace=sys.getsizeof(e1)+sys.getsizeof(e2)+sys.getsizeof(e3)
print("Initially Total Memory Space=",totmemspace)
print("Now Is  GC Running?=",gc.isenabled()) # False
print("Program Execution Ended")
print("----------------------------------------------------------")
#GC calls Destructor by default at the end of the Program automatically / Implictly--Known as Automatic Garbage Collection.

#Non-DestEx1.py
class Employee:
	def __init__(self,eno,ename):
		print("I am from Parameterized Constructor")
		self.eno=eno
		self.ename=ename
		print("\tEmployee Number:{}".format(self.eno))
		print("\tEmployee Name:{}".format(self.ename))
		print("----------------------------------------------------------")

#Main Program
print("----------------------------------------------------------")
print("Program Execution Started")
print("----------------------------------------------------------")
e1=Employee(100,"RS") # Object Creation makes the PVM to Call Parameterized Constructor
e2=Employee(200,"TR") # Object Creation makes the PVM to Call Parameterized Constructor
e3=Employee(300,"DR") # Object Creation makes the PVM to Call Parameterized Constructor
print("Program Execution Ended")
print("----------------------------------------------------------")

