	                           ============================================
		                     global  and local variables and globals()
	                           ============================================
=>When we come across same global Variable names and Local Variable Names in same function definition then PVM gives preference for local variables but not for global variables.
=>In this context, to extract / retrieve the values of global variables names along with local variables, we must use globals() and it returns an object of <class,'dict'> and this dict object stores all global variable Names as Keys and global variable values as values of value.

=>Syntax:-
		var1=val1
		var2=val2
		--------------
		var-n=val-n  # var1, var2...var-n are called global Variables
		def    functionname():
		       ------------------------
		       var1=val11
		       var2=val22
		       ------------------------
		       var-n=val-nn  #  var1, var2...var-n are called local Variables
		       # Extarct  the global variables values
		       dictobj=globals()
		       ------------------------
		       globalval1=dictobj['var1']  #  or  dictobj.get("var1") or globals()['var1'] or global().get('var1')
		       globalval2=dictobj['var2']  # or dictobj.get("var2") or globals()['var2'] or global().get('var2')
		       -----------------------------------------------------
		       -----------------------------------------------------
============================================================================================


examples:
#Program for Demonstrating the Need of globals()
#NOTE: In This Program, we have Different global and local Variable Names.
#GlobalsFunEx1.py
a=10
b=20
c=30
d=40 # Here 'a' , 'b' , 'c' and 'd' are called global Variables
def  operation():
	x=100
	y=200
	z=300
	k=400 # Here x,y,z,k are called Local Variables
	res=a+b+c+d+x+y+z+k
	print("sum=",res)

#Main Program
operation()


#Program for Demonstrating the Need of globals()
#NOTE: In This Program, we have Same global and local Variable Names.
#GlobalsFunEx2.py
a=10
b=20
c=30
d=40 # Here 'a' , 'b' , 'c' and 'd' are called global Variables
def  operation():
	a=100
	b=200
	c=300
	d=400 # Here 'a' , 'b' , 'c' and 'd'  are called Local Variables
	res=a+b+c+d+globals()['a']+globals()['b']+globals().get('c')+globals().get('d')
	print("sum=",res)

#Main Program
operation()


#Program for Demonstrating the Need of globals()
#GlobalsFunEx3.py
a=10
b=20 # Here 'a' , 'b' are called global Variables
def  operation():
	dictobj=globals() # It Obtains Visible and Invisible global Variables along with Its Values
	print("-"*50)
	print("Invisible and Visible Global Variables")
	print("-"*50)
	for gvn,gvv in dictobj.items():
		print("\t{}-->{}".format(gvn,gvv))
	print("-"*50)
	print("Programmer-Defined Global Variables-Way-1")
	print("-"*50)
	print("\tVal of Global Var a=",dictobj['a'])
	print("\tVal of Global Var b=",dictobj['b'])
	print("-"*50)
	print("Programmer-Defined Global Variables-Way-2")
	print("-"*50)
	print("\tVal of Global Var a=",dictobj.get('a'))
	print("\tVal of Global Var b=",dictobj.get('b'))
	print("-"*50)
	print("Programmer-Defined Global Variables-Way-3")
	print("-"*50)
	print("\tVal of Global Var a=",globals().get('a'))
	print("\tVal of Global Var b=",globals().get('b'))
	print("-"*50)
	print("Programmer-Defined Global Variables-Way-4")
	print("-"*50)
	print("\tVal of Global Var a=",globals()['a'])
	print("\tVal of Global Var b=",globals()['b'])
	print("-"*50)
	

#Main Program
operation()


