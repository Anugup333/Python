#ConstEx1.py
class Student:
    def __init__(self): # Deafult OR Parameter-Less Constructor
        print("I am from Deafult Constructor")
        self.sno=100
        self.sname="Rossum"
        print("\tStudent Number={}".format(self.sno))
        print("\tStudent Name={}".format(self.sname))
        print("------------------------------------")

#Main Program
s1=Student() # Object Creation--Makes the PVM to call Deafult Costructor
s2=Student() # Object Creation--Makes the PVM to call Deafult Costructor
s3=Student() # Object Creation--Makes the PVM to call Deafult Costructor

#ConstEx2.py
class Student:
    def __init__(self,sno,name): # Parametrized Constructor
        print("I am from Parametrized Constructor")
        self.sno=sno
        self.sname=name
        print("\tStudent Number={}".format(self.sno))
        print("\tStudent Name={}".format(self.sname))
        print("------------------------------------")

#Main Program
s1=Student(100,"Rossum") # Object Creation--Makes the PVM to call Parametrized Costructor
s2=Student(200,"Travis") # Object Creation--Makes the PVM to call Parametrized Costructor
s3=Student(300,"Dennis") # Object Creation--Makes the PVM to call Parametrized Costructor

#ConstEx3.py
class Test:
    def __init__(self):
        print("I am from Default Constructor")
        self.a=1
        self.b=2
        print("\tValue of a={}".format(self.a))
        print("\tValue of b={}".format(self.b))
        print("------------------------------------")

#Main Program
t1=Test()#Object Creation--makes the PVM to Call Default Constructor
t2=Test()#Object Creation--makes the PVM to Call Default Constructor
t3=Test()#Object Creation--makes the PVM to Call Default Constructor

#ConstEx4.py
class Test:
    def __init__(self,k,v):
        print("I am from Parameterized Constructor")
        self.a=k
        self.b=v
        print("\tValue of a={}".format(self.a))
        print("\tValue of b={}".format(self.b))
        print("------------------------------------")

#Main Program
t1=Test(100,200)#Object Creation--makes the PVM to Call Parameterized Constructor
t2=Test(10,20)#Object Creation--makes the PVM to Call Parameterized Constructor
t3=Test(1000,2000)#Object Creation--makes the PVM to Call Parameterized Constructor

#ConstEx5.py
class Test:
    def __init__(self,k=1,v=2):
        print("I am from Default/Parameterized Constructor")
        self.a=k
        self.b=v
        print("\tValue of a={}".format(self.a))
        print("\tValue of b={}".format(self.b))
        print("------------------------------------")
#main Program
t1=Test() #Object Creation--makes the PVM to Call Default Constructor
t2=Test(10,20)#Object Creation--makes the PVM to Call Parameterized Constructor
t3=Test(100)#Object Creation--makes the PVM to Call Parameterized Constructor
t4=Test(v=1000)#Object Creation--makes the PVM to Call Parameterized Constructor
t5=Test(v=30,k=20)#Object Creation--makes the PVM to Call Parameterized Constructor

#Employee.py<----File Name and Module Name
class Employee:
    def __init__(self,eno,name,sal):
        self.eno=eno
        self.name=name
        self.sal=sal
    def dispempvals(self):
        print("\t{}\t\t{}\t\t{}".format(self.eno,self.name,self.sal))

#EmployeePick.py
from Employee import Employee
import pickle
class EmpPickEx:
    def saveempdata(self):
        with open("emp.pick","ab") as fp:
            while(True):
                #Accept the employee from KBD
                print("-------------------------------------")
                empno=int(input("Enter Employee Number:"))
                empname=input("Enter Employee Name:")
                empsal=float(input("Enter Employee Salary:"))
                print("-------------------------------------")
                #create an object of Employee Class of Employee Module
                eo=Employee(empno,empname,empsal)
                #Save the employee Object data into the file
                pickle.dump(eo,fp)
                print("Employee Record Saved in File")
                print("-------------------------------------")
                ch=input("Do u want Insert Another Record(yes/no):")
                if(ch.lower()=="no"):
                    print("Thx for using this Program")
                    break

#main Program
epx=EmpPickEx()
epx.saveempdata()

#EmployeeUnPick.py
import pickle
class EmployeeUnPick:
    def readempvals(self):
        with open("emp.pick","rb") as fp:
            print("*" * 50)
            while(True):
                try:
                    empobj = pickle.load(fp)
                    empobj.dispempvals()
                except EOFError:
                    print("*"*50)
                    break

#Main Program
eo=EmployeeUnPick()
eo.readempvals()

#Non-ConstEx.py
class Student:
    def getsuddata(self):
        self.sno=100
        self.name="Rossum"
#Main Program
s=Student() # Object Creation
print("content of s=",s.__dict__)
s.getsuddata()
print("content of s=",s.__dict__)

